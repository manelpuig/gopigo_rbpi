// Generated by gencpp from file gopigo3_node/SPIRequest.msg
// DO NOT EDIT!


#ifndef GOPIGO3_NODE_MESSAGE_SPIREQUEST_H
#define GOPIGO3_NODE_MESSAGE_SPIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gopigo3_node
{
template <class ContainerAllocator>
struct SPIRequest_
{
  typedef SPIRequest_<ContainerAllocator> Type;

  SPIRequest_()
    : data_out()  {
    }
  SPIRequest_(const ContainerAllocator& _alloc)
    : data_out(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_out_type;
  _data_out_type data_out;





  typedef boost::shared_ptr< ::gopigo3_node::SPIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gopigo3_node::SPIRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SPIRequest_

typedef ::gopigo3_node::SPIRequest_<std::allocator<void> > SPIRequest;

typedef boost::shared_ptr< ::gopigo3_node::SPIRequest > SPIRequestPtr;
typedef boost::shared_ptr< ::gopigo3_node::SPIRequest const> SPIRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gopigo3_node::SPIRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gopigo3_node::SPIRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gopigo3_node::SPIRequest_<ContainerAllocator1> & lhs, const ::gopigo3_node::SPIRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data_out == rhs.data_out;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gopigo3_node::SPIRequest_<ContainerAllocator1> & lhs, const ::gopigo3_node::SPIRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gopigo3_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gopigo3_node::SPIRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gopigo3_node::SPIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gopigo3_node::SPIRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "561ae924966a6e65b3e6723a081d160a";
  }

  static const char* value(const ::gopigo3_node::SPIRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x561ae924966a6e65ULL;
  static const uint64_t static_value2 = 0xb3e6723a081d160aULL;
};

template<class ContainerAllocator>
struct DataType< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gopigo3_node/SPIRequest";
  }

  static const char* value(const ::gopigo3_node::SPIRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] data_out    # sent byte array\n"
;
  }

  static const char* value(const ::gopigo3_node::SPIRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_out);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPIRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gopigo3_node::SPIRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gopigo3_node::SPIRequest_<ContainerAllocator>& v)
  {
    s << indent << "data_out[]" << std::endl;
    for (size_t i = 0; i < v.data_out.size(); ++i)
    {
      s << indent << "  data_out[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data_out[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GOPIGO3_NODE_MESSAGE_SPIREQUEST_H
